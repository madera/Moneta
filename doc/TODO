TODO:
	* ENFORCE C++03 !!
	* Move 3rd-party into the test directory. It's the only code using it. Maybe move it to externals.
	  Also, externals is a good candidate for a rename into external for GitHub's linguist.
	* Check for proper const and non const ties, tuples et al.
	* Refactor eager templates in favor of transform_view and other lazy elements.
	* Refactor to get more out of the mpl.
	* Refactor sepacons in favor of standard fusion fused.
	* Rethink strategy about to_rtuple functions. Maybe on to_tie variants should exist.
	* Add support for multiple index specifications on meta_set components.
	* Create more meta_set tests. Elaborate and stress.
	* Optimize find by member.
	* Review traits collector macros. They are awful right now. Better yet, review member_trait_base.hxx.
	* Review traits::member<> naming.
	* Move has_member_trait.hxx to a proper place.
	* Rethink about test entity names and using their traits in naming. It's a mess right now.
	* Check const correctness on Codec API.
	* Add support for no-Path-needed for_each_member loops. No penalty should be induced for unused features.
	  Currently only callables with a default nullptr Path parameter are supported.
	* Remove static from headers in favor of unnamed namespaces.
	* moneta::make_entity<>() fails with entities containing array types. Fix this!!
	* Organize PP macros... it's a mess.
	* HOT! Implement partial entity decoders which can decode after several buffer inputs. State information such as
	  path (or a hash of it) should be the key to decoding continuation.
	* Consider using Boost ASIO's placeholders elegance for Path-enabled codecs and for_each/some_member traversals.
	* Test and stress vector limits for entities with several members.
	* Reimplement for_each_member using traverse(), which does the job nicely.
	* Simplify traverse template parameters.
	* Move big_entity_test.cxx somewhere out of the model definitions.
	* Boost PPize mplx::at_c
	* Document codec specs. Encoding, decoding, prefix_type, fixed_values, etc.
	* Implement header optimization for end-users.
	* Make better use of test PCH. Most of the MPL could be inserted.
	* Use typename boost::mpl::clear<Sequence>::type for all sequence operations.
	* Create network samples using Boost asio.
	* Either get_entity_name<ET> or entity_name<ET>::get(), but not both.
	* Remove mpl_vector members.

Current Stack:
	* XML decoder.
	* Shell decoder (using proper API)
	* Relational mappings.
	* Members that are boost::optional<>
	* Implement XML encoder relational bits.

Relational Stack - Stashed:
	* hash_change_tracker
	* Relational context creation (rcontext) using meta_set
	* Entity container search by member
	* Associations
	* Apply associations to relational contexts
	* Reference based entity composition
