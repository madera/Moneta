
                                                                     ChangeTracker                                 LoadTracker
	  ______________________________  ___________________________________________________________________      available or not
	 /___REQ___  ________REQ________\/__________________ OR _______________________ OR __________________\
	||  status || data              ||        copy       ||          hash           ||      bitfield     ||
	||---------||-------------------||-------------------||-------------------------||-------------------||
	||  int32  || tuple<ET>         || tuple<ET>         || hash_tuple<sizeof_<ET>> || bits<N>           ||
	||  flags  || t0, t1, ..., tN-1 || t0, t1, ..., tN-1 || t0, t1, ..., tN-1       || b0, b1, ..., bN-1 ||
	\\_________/\___________________/\___________________________________________________________________//


	flags | data | change_tracker | load_tracker | atime | 



	template <
		class Entity,
		class LoadTracker = bitset_load_tracker<Entity>,
		class ChangeTracker = hash_change_tracker<Entity> // = { copy, hash, bitfield }
	>
	struct entity_container {
		typedef db_tuple<Entity>::type tuple_type;
		
		struct entry : StateTracker {
			int status;
			tuple_type data;
		};
		
		void revert() {
			StateTracker::revert();
		}

		void update(const Entity& entity) {
			pk<const Entity> pk(entity);
			entry_itr = get_entry(pk);
			assert(entry_itr != end());

			entry entry = *entry_itr;

			tuple_type tuple = to_db_tuple(entity);
			new_state = StateTracker::create(tuple);
			if (entry.state != new_state) {
				entry.status |= DIRTY_BIT;
			}
			
			replace_in_index(entry);
		}

	};

	void example() {
		entity_container<Person> container;
		
		Person person;
		person.Name = "John";
		person.Age = 20;
		entity_container.insert(person); // , status=0);

		// action: {
		//	entry newcomer;
		//	newcomer.status = 0;
		//	newcomer.data = db_tuple<>(person);
		// }

		person.Name = "Jane";
		entity_container.update(person);
		
		
		
		entity_container.dirty();
		
		std::cerr << entity_container << std::endl;
	}


	context.update(person);
	context.revert(person);
	context.status();
	context.commit();
	
	context with full state history
	
	context with hash history
	context.revert() -> compile time error
	
	context<hash_state_tracker>
	
	
	
	
	Entity Entry Flags:
	
	
		New
			Deleted
				Dirty
					Persisted
		
	
	
	
	
	class Person {
		std::string Contract;
		int ID;
		std::string Name;
		Address Address;
		Computer Computer;
	};
	
	 tuple<Person>::type --> tuple<std::string, int, std::string, Address, Computer>
	rtuple<Person>::type --> tuple<std::string, int, std::string, int, int>
	
		
	
__F__   _______PK_________   _____________________DATA________________   ____LT___   __________________CT_____________________
int32 | <std::string, int> | <std::string, int, std::string, int, int> | bitset<5> | <std::string, int, std::string, int, int>

template <class Entity>
void fx(const Entity& entity) {
	given an rtuple<T>, find it by pk_tuple (<std::string, int>)
}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


